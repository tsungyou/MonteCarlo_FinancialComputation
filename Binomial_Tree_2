import numpy as np
def crr_binomial_tree(s0=100, k=100, t=1, r=0.02, sigma=0.05, n=50, array_out = False):
    #init
    dt = t/n
    u = np.exp(sigma*np.sqrt(dt))
    d = 1/u
    p = (np.exp(r*dt)-d)/(u-d)


    #price tree
    price_tree = np.zeros([n+1, n+1])

    for i in range(n+1):
        for j in range(i+1):
            price_tree[j, i] = s0*(d**j)*u**(i-j)
    
    option = np.zeros([n+1, n+1])
    option[:, n] = np.maximum(np.zeros(n+1), price_tree[:, n]-k)

    #calculate option price
    for i in np.arange(n-1, -1, -1):
        for j in np.arange(0, i+1):
            option[j, i]= np.exp(-r*dt)*(p*option[j, i+1]+(1-p)*option[j+1, i+1])

    if array_out:
        return [option[0, 0], price_tree, option]
    else:
        return option[0, 0], len(option)
print(crr_binomial_tree(100, 100, 1, 0.05, 0.1, 50, False))

def CRR_binomial_tree_EU(s=100, k=100, r=0.02, t=1, sigma=0.05, n=50, option='call'):
    dt = t / n
    u = np.exp(sigma * np.sqrt(dt))
    d = 1 / u
    p = (np.exp(r * dt) - d) / (u - d)
    stock_price = np.zeros((n + 1, n + 1))
    stock_price[0, 0] = s
    for i in range(1, n + 1):
        stock_price[i, 0] = stock_price[i - 1, 0] * u
        for j in range(1, i + 1):
            stock_price[i, j] = stock_price[i - 1, j - 1] * d
    option_value = np.zeros((n + 1, n + 1))
    if option == 'call':
        option_value[n, :] = np.maximum(stock_price[n, :] - k, 0)
    elif option == 'put':
        option_value[n, :] = np.maximum(k - stock_price[n, :], 0)
    for i in range(n - 1, -1, -1):
        for j in range(i + 1):
            if option == 'call':
                option_value[i, j] = np.exp(-r * dt) * (p * option_value[i + 1, j] + (1 - p) * option_value[i + 1, j + 1])
            elif option == 'put':
                option_value[i, j] = np.exp(-r * dt) * (p * option_value[i + 1, j + 1] + (1 - p) * option_value[i + 1, j])

    return option_value








CRR_binomial_tree_EU()
